Mid Term Presentation

- Introduction
Current condition of commonly played game still doesn’t support sense from skin.
Need something to represent the temperature i.e room temperature or beverage temperature. For example some of current game already make condensation for human breath under low temperature. 
By using condensation we can show that an object have low temperature by 
Make gaming experience more realistic. 
This simulation based on Particle system that would store all of the data for the water droplet and simultaneously store them in ID Map to store the droplets location. Based on the particle system generate 2D texture of Heihgt Map and calculate the image gradient using fragment shader. Finally calculate the refraction of the light and take the reference of the environment map to render on the screen.


はじめに (OK)
In commonly played games today, it is not yet possible to feel the temperature of an objects directly as in the real life. This can make the gaming experience feel less realistic, especially in games where temperature plays an important role. 
One way to represent temperature in games is to show condensation process. Condensation is the process by which water vapor in the air turns into liquid water droplets. This happens when the air is cooled below its dew point, which is the temperature at which the air can no longer hold all of its water vapor. Condensation can be used to show that an object has a low temperature. For example, person's breath might condense in the air when they exhale in a cold environment, or cold beverage might have condensation on its surface. 
This simulation uses a particle system to store the data for each water droplet. The particle data is also stored in an ID map to track the location of each droplet. A 2D height map is generated from the particle system and the image gradient is calculated using a fragment shader. Finally, the refraction of light is calculated using the environment map to render the water droplets on the screen.

Method
Simulate condensation by using combination of OpenCV and OpenGL.
Make particle system and store the data in ID map with size same with later generated texture. Generate height map using OpenCV from particle system and update ID map based on the present of water droplet on the respective pixel. Load the height Map as 2D texture and generate normal map by using fragment shader in glsl (OpenGL Shading Language). Calculate the refraction result from created normal map by using Snell’s Law. This refraction result will refer to environment map that set using OpenGL before. 

ID Map
ID Map used to store the data. Basically this is a two dimension array to represent whether a water droplet presence on a specific coordinate. The size of the array will follow the size of height map. The value in ID map will be 0 or 1, which 0 represent no water droplet and 1 there is water droplet.
The ID map is a two-dimensional array that stores the presence of water droplets at each coordinate. The size of the array is the same as the size of the height map. Each element in the array is either 0 or 1, where 0 represents the absence of a water droplet and 1 represents the presence of a water droplet. (OK)

Height Map
Height Map is used to represent the water droplet shape. The height will based on the shape of hemisphere. Which means the height will gradually reduce from the center until the edge of the circle. This height will be generated to be an image using OpenCV. This would loaded as 2D texture to calculate the Normal Map.
The height map is a grayscale image that represents the height of a water droplet. It is generated using OpenCV and loaded as a 2D texture to calculate the normal map. The height map is based on the shape of a hemisphere, which means that the height gradually decreases from the center of the droplet to the edges. (OK)

Normal Map
Normal map used to show the water droplet surface normal direction. This normal map created by calculated the derivative from the height map. Since we don't need to store the result, all of the calculation did on glsl (OpenGL shading language). The result will be used to calculate the light refraction by using snell's law. 
The normal map is used to represent the normal vector for each pixel on the surface of a water droplet. The normal vector is perpendicular to the surface and points outwards. The normal map is created by calculating the derivative from the height map. This calculation is done in GLSL (OpenGL Shading Language) and the result is not stored, but instead used to calculate the refraction of light using Snell's law. (OK)



Environment Map
Environment map used to make the virtual environment in the simulation. This was used to show the refraction result.
An environment map is a panoramic image that is used to represent the surrounding environment. It is used in simulation to show the refraction result of the water droplets. The environment map is loaded into the GPU and used to calculate the refraction of light at the surface of the water droplets. This results in a more realistic and visually appealing simulation of condensation.

Result and Discussion 
Successfully create bunch of water droplet with correct refraction. But, using 2D image texture for height map caused the result pixelated. We can increase the resolution from texture image but it will increase the time execution.
(Kasih gambar pixelated sama enggak kalau dinaikkan resolusi) . 
(Lama execution time).

Next thing that i will implement is, to calculate fresnel effect to give more realism in the result and update height map texture per frame so that rendered scene will be animated to accurately simulate condensation effect.

Although the current implementation successfully creates water droplets with correct refraction, the result is pixelated due to the use of a 2D image texture for the height map. Increasing the resolution of the texture image would improve the quality of the result, but would also increase the execution time.

In future work, we plan to implement the following: (point)
Calculate the Fresnel effect to add more realism to the result.
Update the height map texture per frame to create an animated condensation effect.
These improvements will make the condensation simulation more realistic and visually appealing.

Conclusion
By using this method we can simulate condensation effect relatively light weighted by only using texture. But to get more realistic result, I believe that using 3D model of water droplet will give more depth on the rendered scene.
This method simulates the condensation effect relatively efficiently by using only textures. However, to achieve a more realistic result, I believe that using a 3D model of a water droplet would give the rendered scene more depth.(OK)
