Particle System
Imagine each of the water droplet is a particle. One particle will data such as, position, mass, radius and density. So the particle system will store all of the water droplet data.

Height Map
From the data that stored in the particle map, we will calculate the height of the water surface on each pixel. Since the water droplet shape is based on the hemisphere shape, the calculation of the height will be based on this equation. Which only a pythagoras theorem.
The value then represent the whiteness of each pixel, which means the whiter it is the higher it water surface.

ID Map
This map is a 2D array with the same size with height map that created before. Used to track wheter on a specific pixel there is water droplet or not. The checking process is quite simple since we already know the height, if the height is greater than  0, then the value of respective ID map is 1 and vice versa.

Normal Map
Normal Map used to represent the normal vecter of the water droplet surface. The value of RGB will represent the xyz axis direction. 
Each red and green value is calculated based on the gradient of the height map by using sobel filter for the x and y axis. For the z axis the value is alwas 1, and that is also why the texture is blueish.
All of this calculation was done in the fragment shader, since we don't need to store the texture data, instead we used it to calculate the refraction of the light based on snell's law.

Environment Map
To render the refraction result, we need a virtual environment to refer to. That is when environment map take place. 
Used to represent the virtual environment for the rendered result. Build by using six 2Dtexture.
Imagine this room is the environment map, the 4 walls, the ceiling and the floor will be represented by its own 2Dtexture.

Current result
Since the water dorplet rendered based on 2Dtexture, the result as we can see here was pixelated. Of course by increasing the resolution of the texture will reduce it. But that is alse means increasing the excecution time.

Future works
That is why there are more works to do in the future. Obviously the first is to improve height map generating algorithm, so that even if we increase the resolution of the height map, the increasing of excecution time can be reduced. The second is to make this system update the texture for each frame so that we can animate the whole process. The last one is to also calculate the fresnel reflection to make the rendered result looks like more realistic.

------------------------------------------------
本研究の目的は
本研究の目的は、一般的なゲームにおいて、寒さを直接感知することにまだできないため、結露を表示することで物体が低温であることを見せる。

シミュレーション自体はは、このフローチャートのようにパーティクルシステムから始まり、必要なマップのマップを生成してからレンダリング結果を表します。各マップについては後で詳しく説明します。

パーティクルシステム
水滴のひとつがパーティクルであるとします。各パーティクルは、位置、質量、半径、密度などのデータを持っています。ようすると、パーティクルシステムにはすべての水滴がデータが格納されています。

ハイトマップ
格納されたデータから、水滴の表面の高さを計算します。高さの計算はこの式によります。この値は各ピクセルの白さを表し、白ければ白いほど水滴の表面が高いとのことです。

IDマップ
ハイトマップを計算してから、各ピクセルに水滴があるかどうかを追跡(ついせき)するためにIDマップを作りました。ハイトマップの高さの値が0より大きければ、その位置のIDマップの値は1に設定し、0の場合はIDマップの値も0に設定しました。

法線マップ
法線マップは、水滴表面の法線ベクトルを表すために使用されています。
ハイトマップの導関数により、法線マップを計算しました。
計算した法線マップのデータを保存する必要がありませんが、代わりにスネルの法則により光の屈折（くっせつ）を計算するために使用されます。
#、これがマップの画像が青っぽい理由でもあります。

環境マップ
屈折結果をレンダリングするには、参照する環境が必要で、そこで環境マップが使用されています。
環境マップは水滴による背景の屈折を表現します。

進捗状況（しんちょくじょうきょう）
現状、ほぼ適切に結露をレンダリングができています。しかし、使っているマップの解像度が低いため、このよう画素の輪郭が目立っています。もちろん、マップの解像度を上げれば、画素の輪郭は解消されますが、それは同時に処理時間の増加するを意味しています。

今後の課題
というわけで、今後の課題はまだまだあります。ひとつは、ハイトマップの生成アルゴリズムを改良し、ハイトマップの解像度を上げてもしょり時間の増加を抑えられる（おさえられる）ようにすることです。2つ目は、このシミュレーションをフレームごとにハイトマップを更新するようにし、プロセス全体をアニメーション化ができるようにすることです。最後の1つは、レンダリング結果をよりリアルに見せるために、フレネル反射を計算することです。



